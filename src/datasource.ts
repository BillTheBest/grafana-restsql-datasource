///<reference path="./common.d.ts" />

import angular from 'angular';
import _ from "lodash";

class RestSQLDatasource {
  URI_RESOURCE: string = "/res/";
  URI_METADATA: string = "/conf/metadata/";
  type: any;
  url: any;
  name: any;
  supportMetrics: boolean;
  supportAnnotations: boolean;
  q: any;
  tzdiff: any;

  /** @ngInject */
  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {
    this.type = instanceSettings.type;
    this.url = instanceSettings.url;
    this.name = instanceSettings.name;
    this.q = $q;
  }

  testDatasource() {
    return this.restSQLRequest(this.URI_RESOURCE).then(function (response) {
      if (response.status === 200) {
        return {
              status: "success",
              message: "OK: RestSQL datasource seems to be available",
              title: "Success"
            };
      } else {
        return {
              status: "failure",
              message: "Could not connect to datasource. HTTP status code: "+response.status,
              title: "Success"
            };
      }}  , function(response) {
        return {
              status: "failure",
              message: "Could not connect to datasource" + response.status,
              title: "Failure"
            };
      });
  }

  restSQLRequest(uri: string) {
    console.log("Doing RestSQL request : "+uri);
    return this.backendSrv.datasourceRequest({
      url: this.url + uri,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    }).then(result => {
      return result;
    }, function(err) {
      if (err.status !== 0 || err.status >= 300) {
        throw { message: 'RestSQL Error: '+ err.data}
      }
    });
  }

  buildRestSQLURL(resource: string, timeColumn: string, range) {
    return this.URI_RESOURCE + resource + "?" + timeColumn + "=>=" + range.from.local().format('YYYY-MM-DDTHH:mm:ss.SSS') + "&" + timeColumn + "=<=" + range.to.local().format('YYYY-MM-DDTHH:mm:ss.SSS');
  }

  // Fetches resource names
  getResources() {
     return this.restSQLRequest(this.URI_RESOURCE).then(function (response) {
       if (response.status === 200) {
         var regex = /<tr><td>(.*?)<\/td>/g , resources = [], matches;
         while ( matches = regex.exec(response.data)) {
            resources.push(matches[1]);
         }
         return resources;
       } else {
         return null;
       }
     });
  }

  getResourceColumns(resource: string) {
    return this.restSQLRequest(this.URI_METADATA+resource).then(function (response) {
        if (response.status === 200) {
          var regex = /columnLabel="(.*?)"/g , columns = [], matches;
          while ( matches = regex.exec(response.data)) {
             columns.push(matches[1]);
          }
          return columns;

        }
    });
  }

  query(options) {
    var ds = this;
    var theQueryResult : any;

//    console.log("Query():", options);

    var theRequests = options.targets.map(function (eachTarget) {
          return ds.restSQLRequest(ds.buildRestSQLURL(eachTarget.resource, eachTarget.timeColumn, options.range)).then(
            function (response) {
              var datapoints = [];

              if (response.data[eachTarget.resource+'_datas'] != undefined) {
                datapoints = response.data[eachTarget.resource+'_datas'].map(function (eachItem) {
                  return [ eachItem[eachTarget.dataColumn] , new Date(eachItem[eachTarget.timeColumn]).getTime() ];
                });
              }
              return {
                "target" : eachTarget.refId,
                "datapoints" : datapoints
              }
            }
          )
        });

        theQueryResult= this.q.all(theRequests).then(function (response) {
          return {
            "data" : response.map(function (eachRequestResult) {

              var theDataPoints = [];
              // filter out nulls
              eachRequestResult.datapoints.map(function(eachItem) {
                  if ((typeof eachItem[0] !== 'undefined') &&
                    (typeof eachItem[1] !== 'undefined')) {
                      theDataPoints.push([ eachItem[0], eachItem[1]]);
                  }
                });
              // sort the result
              theDataPoints.sort(function (a,b) {
                return a[1]-b[1];
              })

              return {
                "target" : eachRequestResult.target,
                "datapoints" : theDataPoints
             };
            })
          };
        });

      return theQueryResult;

      // sample dummy data for testing
      // return {"data":
      //           [
      //             {"target":"A","datapoints":[[622.5,1463120960127],[365.8,1463120910127],[42,1463120860127],[240,1463120810127],[401,1463120760127],[364,1463120710127],[325,1463120660127],[6,1463120610127],[267,1463120560127],[302,1463120510127],[123,1463120460127],[290,1463120410127],[326,1463120360127],[322,1463120310127],[539,1463120260127],[149,1463120210127],[18,1463120160127],[10,1463120110127],[643,1463120060127],[256,1463120010127],[13,1463119960127],[455,1463119910127],[341,1463119860127],[394,1463119810127],[662,1463119760127],[244,1463119710127],[213,1463119660127],[274,1463119610127],[466,1463119560127],[247,1463119510127],[11,1463119460127],[178,1463119410127],[291,1463119360127],[1039,1463119310127],[84,1463119260127],[384,1463119210127],[339,1463119160127],[266,1463119110127],[22,1463119060127],[384,1463119010127],[701,1463118960127],[549,1463118910127],[13,1463118860127],[279,1463118810127],[266,1463118760127],[267,1463118710127],[1373,1463118660127],[51,1463118610127],[388,1463118560127],[58,1463118510127],[175,1463118460127],[425,1463118410127],[338,1463118360127],[373,1463118310127],[509,1463118260127],[406,1463118210127],[168,1463118160127],[342,1463118110127],[299,1463118060127],[696,1463118010127],[483,1463117960127],[775,1463117910127],[1178,1463117860127],[625,1463117810127],[230,1463117760127],[553,1463117710127],[185,1463117660127],[584,1463117610127],[214,1463117560127],[183,1463117510127],[282,1463117460127],[262,1463117410127],[345,1463117360127],[204,1463117310127],[59,1463117260127],[299,1463117210127],[82,1463117160127],[376,1463117110127],[474,1463117060127],[526,1463117010127],[220,1463116960127],[293,1463116910127],[77,1463116860127],[109,1463116810127],[633,1463116760127],[69,1463116710127],[392,1463116660127],[376,1463116610127],[309,1463116560127],[578,1463116510127],[519,1463116460127],[310,1463116410127],[497,1463116360127],[636,1463116310127],[674,1463116260127],[516,1463116210127],[143,1463116160127],[325,1463116110127],[516,1463116060127],[279,1463116010127],[977,1463115960127],[322,1463115910127],[1277,1463115860127],[568,1463115810127],[907,1463115760127],[465,1463115710127],[528,1463115660127],[156,1463115610127],[729,1463115560127],[316,1463115510127],[466,1463115460127],[356,1463115410127],[549,1463115360127],[448,1463115310127],[386,1463115260127],[400,1463115210127],[391,1463115160127],[588,1463115110127],[574,1463115060127],[507,1463115010127],[545,1463114960127],[417,1463114910127],[542,1463114860127],[346,1463114810127],[561,1463114760127],[765,1463114710127],[446,1463114660127],[356,1463114610127],[523,1463114560127],[508,1463114510127],[595,1463114460127],[457,1463114410127],[163,1463114360127],[298,1463114310127],[301,1463114260127],[445,1463114210127],[170,1463114160127],[595,1463114110127],[508,1463114060127],[268,1463114010127],[488,1463113960127],[670,1463113910127],[366,1463113860127],[501,1463113810127],[701,1463113760127],[484,1463113710127],[232,1463113660127],[317,1463113610127],[153,1463113560127],[444,1463113510127],[330,1463113460127],[399,1463113410127],[612,1463113360127],[359,1463113310127],[320,1463113260127],[424,1463113210127],[490,1463113160127],[426,1463113110127],[717,1463113060127],[339,1463113010127],[420,1463112960127],[436,1463112910127],[398,1463112860127],[419,1463112810127],[595,1463112760127],[518,1463112710127],[780,1463112660127],[466,1463112610127],[474,1463112560127],[505,1463112510127],[593,1463112460127],[654,1463112410127],[402,1463112360127],[456,1463112310127],[525,1463112260127],[578,1463112210127],[413,1463112160127],[790,1463112110127],[567,1463112060127],[512,1463112010127],[441,1463111960127],[501,1463111910127],[550,1463111860127],[692,1463111810127],[499,1463111760127],[507,1463111710127],[519,1463111660127],[581,1463111610127],[414,1463111560127],[371,1463111510127],[376,1463111460127],[617,1463111410127],[327,1463111360127],[755,1463111310127],[615,1463111260127],[526,1463111210127],[569,1463111160127],[473,1463111110127],[508,1463111060127],[558,1463111010127],[577,1463110960127],[473,1463110910127],[594,1463110860127],[695,1463110810127],[607,1463110760127]]},
      //             {"target":"B","datapoints":[[1622.3,1463120960127],[1365.2,1463120910127],[142,1463120860127],[1240,1463120810127],[1401,1463120760127],[364,1463120710127],[325,1463120660127],[6,1463120610127],[267,1463120560127],[302,1463120510127],[123,1463120460127],[290,1463120410127],[326,1463120360127],[322,1463120310127],[539,1463120260127],[149,1463120210127],[18,1463120160127],[10,1463120110127],[643,1463120060127],[256,1463120010127],[13,1463119960127],[455,1463119910127],[341,1463119860127],[394,1463119810127],[662,1463119760127],[244,1463119710127],[213,1463119660127],[274,1463119610127],[466,1463119560127],[247,1463119510127],[11,1463119460127],[178,1463119410127],[291,1463119360127],[1039,1463119310127],[84,1463119260127],[384,1463119210127],[339,1463119160127],[266,1463119110127],[22,1463119060127],[384,1463119010127],[701,1463118960127],[549,1463118910127],[13,1463118860127],[279,1463118810127],[266,1463118760127],[267,1463118710127],[1373,1463118660127],[51,1463118610127],[388,1463118560127],[58,1463118510127],[175,1463118460127],[425,1463118410127],[338,1463118360127],[373,1463118310127],[509,1463118260127],[406,1463118210127],[168,1463118160127],[342,1463118110127],[299,1463118060127],[696,1463118010127],[483,1463117960127],[775,1463117910127],[1178,1463117860127],[625,1463117810127],[230,1463117760127],[553,1463117710127],[185,1463117660127],[584,1463117610127],[214,1463117560127],[183,1463117510127],[282,1463117460127],[262,1463117410127],[345,1463117360127],[204,1463117310127],[59,1463117260127],[299,1463117210127],[82,1463117160127],[376,1463117110127],[474,1463117060127],[526,1463117010127],[220,1463116960127],[293,1463116910127],[77,1463116860127],[109,1463116810127],[633,1463116760127],[69,1463116710127],[392,1463116660127],[376,1463116610127],[309,1463116560127],[578,1463116510127],[519,1463116460127],[310,1463116410127],[497,1463116360127],[636,1463116310127],[674,1463116260127],[516,1463116210127],[143,1463116160127],[325,1463116110127],[516,1463116060127],[279,1463116010127],[977,1463115960127],[322,1463115910127],[1277,1463115860127],[568,1463115810127],[907,1463115760127],[465,1463115710127],[528,1463115660127],[156,1463115610127],[729,1463115560127],[316,1463115510127],[466,1463115460127],[356,1463115410127],[549,1463115360127],[448,1463115310127],[386,1463115260127],[400,1463115210127],[391,1463115160127],[588,1463115110127],[574,1463115060127],[507,1463115010127],[545,1463114960127],[417,1463114910127],[542,1463114860127],[346,1463114810127],[561,1463114760127],[765,1463114710127],[446,1463114660127],[356,1463114610127],[523,1463114560127],[508,1463114510127],[595,1463114460127],[457,1463114410127],[163,1463114360127],[298,1463114310127],[301,1463114260127],[445,1463114210127],[170,1463114160127],[595,1463114110127],[508,1463114060127],[268,1463114010127],[488,1463113960127],[670,1463113910127],[366,1463113860127],[501,1463113810127],[701,1463113760127],[484,1463113710127],[232,1463113660127],[317,1463113610127],[153,1463113560127],[444,1463113510127],[330,1463113460127],[399,1463113410127],[612,1463113360127],[359,1463113310127],[320,1463113260127],[424,1463113210127],[490,1463113160127],[426,1463113110127],[717,1463113060127],[339,1463113010127],[420,1463112960127],[436,1463112910127],[398,1463112860127],[419,1463112810127],[595,1463112760127],[518,1463112710127],[780,1463112660127],[466,1463112610127],[474,1463112560127],[505,1463112510127],[593,1463112460127],[654,1463112410127],[402,1463112360127],[456,1463112310127],[525,1463112260127],[578,1463112210127],[413,1463112160127],[790,1463112110127],[567,1463112060127],[512,1463112010127],[441,1463111960127],[501,1463111910127],[550,1463111860127],[692,1463111810127],[499,1463111760127],[507,1463111710127],[519,1463111660127],[581,1463111610127],[414,1463111560127],[371,1463111510127],[376,1463111460127],[617,1463111410127],[327,1463111360127],[755,1463111310127],[615,1463111260127],[526,1463111210127],[569,1463111160127],[473,1463111110127],[508,1463111060127],[558,1463111010127],[577,1463110960127],[473,1463110910127],[594,1463110860127],[695,1463110810127],[607,1463110760127]]},
      //           ]
      //         };

    }
}

export {RestSQLDatasource};
